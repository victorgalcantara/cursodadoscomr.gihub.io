---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Capítulo 2 {.unnumbered}

No capítulo anterior, vimos sobre a história e o funcionamento do R e RStudio, introduzindo o fluxo de trabalho e as operações fundamentais. Vimos três tipos de valores que podemos utilizar na programação: números, caracteres/texto e lógica (TRUE/FALSE). Depois, como armazenar e manusear os valores em objetos na memória, em duas estrutura de dados: vetores e data.frame. Vimos como são estruturadas e como usar as funções e, por fim, manuseamos dados usando testes lógicos. Todas as operações foram feitas com a base do R, usando comandos e funções elementares.

Até aqui, espero que você saiba os comandos básicos para inserir comentários e atribuir valores a objetos, manusear objetos que guardam vetores e data.frames, usar funções e fazer testes lógicos.

Neste capítulo, continuaremos a explorar as operações e funções fundamentais de uma forma mais aprofundada.

## Funções: uma ideia mais detalhada

Vimos que funções são operações programadas, que são executadas recebendo (ou não) argumentos de *input* e retornando algum resultado do processamento (*output*). As funções são estruturadas por um nome, seguido de parênteses dentro dos quais entram os argumentos de *input.*

Há um conjunto de funções básicas que já vem com o R e podem ser utilizadas, como a função "ifelse".

```{r}
# teste = 1 é maior do que 3? 
# Se sim, retorne "Verdade", se não, "Mentira" 
ifelse( test = 1>3, 
        yes = "Verdade", 
        no ="Mentira" ) 
```

Usando a sintaxe do R, podemos também programar uma função. Para isso, usamos a seguinte estrutura de comandos:

nome_da_funcao \<- **function**( input ) { algum processamento do input }

```{r}
# Criando uma função
x_mais_1 <- function( x ) { x + 1 }
```

Observe que a função criada aparece na memória como um objeto do tipo "function", na janela de ambiente global. Agora, podemos utilizar a função criada.

```{r}
# Utilizando a função criada
x_mais_1(x = 2)
```

Este é um exemplo didático. Em geral, as funções executam operações complexas e servem para facilitar o nosso código. Veja o exemplo abaixo:

```{r}
frase_exemplo <- function( x, y ) { 
  paste("Meu nome é",x,"e tenho",y,"anos")  }

# a função "paste" cola textos com valores guardados em objetos

frase_exemplo(x = "Victor",y = 26)
```

Além das funções básicas do R, temos muitas outras que foram programadas pela comunidade de usuários, entre as quais aquelas desenvolvidas por Hadley Wickham para análise de dados com R. As funções programadas são agrupadas em pacotes, que são disponibilizados pelo CRAN ou em plataformas de desenvolvedores, como o GitHub. Os pacotes no CRAN passam por inspeção do grupo de controle e podem ser instalados diretos pelo R. Já os pacotes em outras plataformas podem ser instalados usando funções específicas.

Para usar os pacotes, temos primeiro que instalar em nosso computador local, usando a função install.packages( ).

-   install.packages( ) : função para instalar pacotes distribuídos pelo CRAN

Precisamos fazer a instalação apenas uma vez. Quando feita, teremos o pacote salvo em nosso computador, em uma pasta dentro dos arquivos do R. Sempre que precisarmos do pacote em um código, porém, devemos carregá-lo na memória, usando a função library( ).

-   library( ) : função para carregar na memóroia os pacotes instalados no computador

Agora, podemos instalar e carregar na memória o pacote mais famoso do R: o tidyverse. Logo começaremos a usá-lo.

```{r}
# install.packages("tidyverse")
library(tidyverse)
```

A instalação e carregameto de pacotes sempre deve ser feita no início do *script*, compondo a parte de setup. Como os comandos são executados conforme a ordem em que aparecem no *script*, devemos começar com o setup do nosso ambiente de trabalho. Embora seja possível executar muitas operações com os botões disponibilizados pelo RStudio, é mais eficiente executá-las com comandos. No próximo tópico, veremos operações de rotina para a organização do ambiente de trabalho.

# Setup

Há três configurações de setup que devemos incorporar no nosso *script*:

1.  gestão da memória;

2.  gestão das funções e pacotes;

3.  gestão do diretório.

#### Gestão da memória

Temos um conjunto de funções muito úteis para limpar a memória local (o que ajuda no processamento) e obter o diretório (pasta) principal onde estamos trabalhando.

-   rm( ) : de "Remove", para remover objetos da memória

-   ls( ) : de "List", para listar objetos guardados na memória

-   gc( ) : de "Garbage Clean", para limpeza da lixeira e liberação de memória.

```{r}
# Título do script: Como iniciar um script
# Autor: Victor G Alcantara

# Setup -------------------------------------------------------

# Gestão da memória

ls() # Para listar objetos salvos na memória

rm( list=ls() ) # Remove todos os objetos listados na memória

gc() # Faz a limpeza da lixeira da memória
```

#### Gestão de funções/pacotes

Após a limpeza da memória, devemos inserir comandos para instalar (se necessário) e carregar na memória os pacotes de funções externas que serão utilizados. Para isso, utilizamos:

-   install.packages( ) : para instalar pacotes

-   library( ) : para carregar pacotes na memória

```{r}
# Título do script: Como iniciar um script
# Autor: Victor G Alcantara

# Setup -------------------------------------------------------

# Gestão da memória
rm( list = ls() ) # Remove todos os objetos listados na memória
gc() # Faz a limpeza da lixeira da memória

# Gestão de funções e pacotes
# install.packages("tidyverse") # Instala o pacote tidyverse como exemplo
library(tidyverse) # Carrega o pacote tidyverse como exemplo
```

#### Gestão de diretórios

Após gerir a memória e as funções, definimos nosso diretório de trabalho. Essa etapa é muito importante, porque o R trabalha tendo como referência o diretório principal definido para acessar arquivos e navegar pelo computador. Para isso, utilizamos as funções:

-   getwd( ) : de "Get Working Directory", para obter diretório principal no qual está trabalhando

-   setwd( ) : de "Get Working Directory", para definir o diretório principal

    Aqui temos o primeiro detalhe do R. Como foi projetado para operar em Linux, ele reconhece o endereço do diretório com as barras ao contrário de como é usado no Windows e Mac. Assim, devemos inverter a posição das barras quando copiamos o caminho de um diretório onde vamos trabalhar.

```{r}
# Título do script: Como iniciar um script
# Autor: Victor G Alcantara

# Setup -------------------------------------------------------

# Gestão da memória
rm( list = ls() ) # Remove todos os objetos listados na memória
gc() # Faz a limpeza da lixeira da memória

# Gestão de funções e pacotes
# install.packages("tidyverse") # Instala o pacote tidyverse como exemplo
library(tidyverse) # Carrega o pacote tidyverse como exemplo

# Gestão do diretório
getwd() # Verifica diretório principal de trabalho
setwd(dir = "C:/Users/13477365/Documents/book-dadoscomr") # Define diretório principal de trabalho
# Atenção à posição das barras! Deve estar como "/"
```

Agora, com o ambiente pronto para o trabalho, podemos iniciar a importação e dar continuidade ao fluxo.

Antes de entrarmos no fluxo de análise de dados, vamos retomar as operações fundamentais para entender como funcionam comandos relacionais e condicionais.

### Comandos relacionais

As operações relacionais são usadas para combinar ou inverter testes e condições. Temos três operadores relacionais principais:

AND ( **&** ): Retorna TRUE se ambas as condições forem verdadeiras.

OR ( **\|** ): Retorna TRUE se pelo menos uma condição for verdadeira.

NOT ( **!** ): Inverte o valor lógico, transformando TRUE em FALSE e vice-versa.

```{r}
# "&" para "E"

2 > 2 & 2 == 2

# Leitura: 2 é maior que 2 E é igual a 2?
# R: Não (FALSE), pois 2 não é maior que 2

2 > 1 & 2 == 2
# Leitura: 2 é maior que 1 E é igual a 2?
# R: Sim (TRUE), 2 é maior que 1 E é igual a 2

# "|" para "OU"

2 > 2 | 2 == 2
# Leitura: 2 é maior que 1 OU é igual a 2?
# R: Sim (TRUE), pois 2 é igual a 2


2 > 2 | 2 < 2
# Leitura: 2 é maior que 2 OU é menor que 2?
# R: Não (FALSE), 2 não é maior que 2 OU menor que 2

!2 > 2
# Leitura: inverta o resultado do teste 2 é maior que 2
# R: Sim (TRUE), 2 é maior que 2
```

Para que isso? Imagine que você queira construir categorias cruzadas de sexo e raça. Para identificar mulheres E negras, seu comando será:

dados\$sexo == "Feminino" & dados\$raca == "Negra"

Vamos colocar esses comandos em prática com dados reais.

# Import

Como você já deve ter percebido, é possível construir comandos complexos com as operações básicas. Contudo, a partir de agora, vamos começar a usar os pacotes para facilitar a nossa vida.

Os primeiros pacotes que vamos utilizar é o *Rio (R Input Output)* e o *Tidyverse*.

```{r}
# Título do script: Como iniciar um script
# Autor: Victor G Alcantara

# Setup -------------------------------------------------------

# Gestão da memória
rm( list = ls() ) # Remove todos os objetos listados na memória
gc() # Faz a limpeza da lixeira da memória

# Gestão de funções e pacotes
#install.packages("tidyverse") # Instala o pacote tidyverse como exemplo
#install.packages("rio") # R Input Output,  para impotar e exportar dados

library(rio)
library(tidyverse)

# Gestão do diretório
getwd() # Verifica diretório principal de trabalho
setwd(dir = "C:/Users/13477365/Documents/book-dadoscomr") # Define diretório principal de trabalho
# Atenção à posição das barras! Deve estar como "/"
```

Agora, vamos importar nosso primeiro dado de trabalho.

```{r}
# Import ---------------------------------------------------

br_uf_data <- import( "G:/Meu Drive/02 - GitHub/R-Intro/000 - P&R/00 data/br_uf.csv" )
```

Observe que defini o encoding do arquivo como "Latin-1", para identificar os acentos usados em línguas latinas como o português.

Com os dados importados para a memória, podemos explorar as funções fundamentais no tratamento de dados.

Em primeiro lugar, temos um conjunto de funções muito úteis para olhar para a estrutura dos dados. Diferente do SPSS e Excel, quando importamos um conjunto de dados e guardamos em um objeto, eles ficam armazenados na memória de modo que não observamos diretamente. É possível abrir a planilha de dados, mas não é recomendado quando os dados possuem larga escala, pois consome muito do processamento do computador. Por isso, utilizamos funções para verificar a estrutura dos nossos dados.

-   dim( ): retorna as dimensões da base de dados (linhas x colunas)

-   head( ): retorna os primeiros valores da base de dados (default = 5, mas passível de alteração)

-   tail( ): retorna os últimos valores da base de dados (default = 5, mas passível de alteração)

-   names( ): retorna o nome das colunas/variáveis

-   str( ): retorna a estrutura da base de dados, indicando as dimensões e o tipo de cada variável

```{r}
dim( br_uf_data )

# O Saeb 2021 tem 70.897 linhas e 137 colunas

names( br_uf_data )
```

```{r}
head( br_uf_data , n = 3)

str( br_uf_data )
```

Embora não seja recomendado olhar para a planilha de dados quando o volume é muito grande, podemos utilizar recursos para observar apenas uma parte dos dados.

```{r}
View( head( br_uf_data ) )
```

Após observar a estrutura dos dados, temos uma ideia de quais variáveis e casos a base de dados guarda.

Agora, podemos partir para o manuseio dos dados.

## Select e Filter

Como vimos anteriormente, podemos filtrar e selecionar nossa base usando apenas comandos básicos do R.

```{r}
# Selecionar variáveis
minha_selecao_dados <- br_uf_data[,c(1,9)]
head(minha_selecao_dados)

# Filtrar casos 
meu_filtro_casos <- br_uf_data[ , 9 ] > 0.60
meu_filtro_casos <- br_uf_data[ meu_filtro_casos, 1 ]

head(meu_filtro_casos)
```

Para tornar nosso código mais interpretável e organizado, vamos utilizar as funções do pacote tidyverse para operações de manuseio dos dados. Veja como tudo fica mais simples.

-   select( ) : função para selecionar colunas/variáveis

-   filter( ): função para filtrar casos

```{r}
# Selecionar variáveis
minha_selecao_dados <- select(
  .data = br_uf_data,
  sigla_uf,renda_pc)
head(minha_selecao_dados)

meu_filtro_casos <- filter(
  .data = br_uf_data,
  indice_gini > 0.60)
head(meu_filtro_casos)
```

Agora, para continuar trabalhando com esses dados, vamos fazer uma seleção de variáveis e um filtro de casos conforme nossos interesses.

Para isso, vamos introduzir o uso do *pipe*, uma estrutura de código muito útil na programação. O *pipe* é composto pelo símbolo %\>%, e representa a ideia de que um objeto é tomado como referêcia para a próxima função a ser utilizada.

```{r}
br_uf_data <- br_uf_data %>% select(sigla_uf,
                                    populacao,populacao_urbana,renda_pc,
                                    pea,pia,expectativa_vida,taxa_superior_25_mais,
                                    indice_gini,prop_renda_10_ricos,
                                    prop_renda_40_pobres)

# Filtro para escolas que tiveram mais de 80% (0.8) dos estudantes matriculados participando da prova
br_uf_data <- br_uf_data %>% filter(indice_gini >= 0)
```

## Rename

Depois de filtrada e selecionada a nossa base de dados, podemos renomear nossas variáveis para deixá-la mais intuitiva. Muitas vezes elas estão codificadas e dificultam a interpretação e manuseio. Para isso, utilizaremos a função rename.

-   rename( ): para renomear colunas/variáveis

```{r}
br_uf_data <- br_uf_data %>% rename(
                          uf=sigla_uf,
                          pop=populacao,
                          pop_urb=populacao_urbana,
                          rpct=renda_pc,
                          exp_vida=expectativa_vida,
                          tx_sup=taxa_superior_25_mais,
                          gini=indice_gini)

head(br_uf_data)
```

## Export

Tendo selecionado e filtrado os dados, podemos salvar o recorte da base original em um novo arquivo, para continuar o manuseio no próximo capítulo. Para isso, usamos a função *export* do pacote Rio.

-   export( ) : para exportar dados do R

Assim como a função *import*, basta inserir o endereço do diretório e, no final, o nome do arquivo com a extensão desejada para salvar. O pacote rio comporta as extensões mais utilizadas (excel - xlsx, spss - sav, comma separated values - csv, etc.).

```{r}
export(x = br_uf_data,
       file = "G:/Meu Drive/02 - GitHub/R-Intro/A02 - Explore II/0 - data/mydata.RDS")
```

# Extra: unir bases de dados com chave de identificação comum

É comum querermos unir diferentes dados sobre determinados indivíduos. Por exemplo, em pesquisas sobre educação, geralmente procura-se agregar dados de escolas que são estruturados em diferetes bases de dados. Para unir bases de dados, é preciso que os indivíduos tenham uma chave de identificação comum. Com a chave, é possível unir as bases usando a função *merge*.

-   merge( ) : une diferentes bases de dados que têm os mesmos indivíduos como referência

Como demonstração, farei a união dos dados dos estados (UFs), disponibilizados pelo IBGE via pacote *geobr*, com os dados das UFs que vimos anteriormente.

```{r}
# install.packages(geobr)
library(geobr) # Carrega pacote necessário

# Faz download e carregamento dos dados dos estados (UFs)
geo_uf <- read_state(year = 2010)

# renomeia variável que será utilizada como chave comum
geo_uf <- geo_uf %>% rename(uf=abbrev_state)

mydta <- merge(geo_uf,br_uf_data)

# Export
export(x = mydta,
       file = "G:/Meu Drive/02 - GitHub/R-Intro/A02 - Explore II/0 - data/mydata.RDS")
```

# Desafio
