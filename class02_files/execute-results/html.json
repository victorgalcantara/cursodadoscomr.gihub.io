{
  "hash": "8dac3af99ba8ffd59938ca86afbc27d0",
  "result": {
    "engine": "knitr",
    "markdown": "# Capítulo 2 {.unnumbered}\n\nCalma, calabreso(a). Isso é papo pra próxima semana!\n\n### Comandos lógicos\n\nAlém dos cálculos, podemos também fazer operações lógicas, que comparam valores e retornam TRUE ou FALSE. Os operadores principais são:\n\nIgual a (==): Verifica se dois valores são iguais.\n\nDiferente de (!=): Verifica se dois valores são diferentes.\n\nMaior que (>): Verifica se um valor é maior que o outro.\n\nMenor que (<): Verifica se um valor é menor que o outro.\n\nMaior ou igual a (>=): Verifica se um valor é maior ou igual ao outro.\n\nMenor ou igual a (<=): Verifica se um valor é menor ou igual ao outro.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 >  2  # MAIOR QUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n2 < 2   # MENOR QUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n2 == 3  # IGUALDADE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n2 >= 2 # MAIOR OU IGUAL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Por quê igualdade são dois sinais?\n# R: Porque apenas um significa atribuição de valor. Igual a setinha, como vimos.\n\n\"eu\" == \"todo mundo\" # Igualdade\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"eu\" == \"eu\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"eu\" != \"vc\"         # Diferença\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Teste em grupo\n\"eu\" %in% c(\"vc\",\"todo mundo\") # Generalização - se contém\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Nota importante: \"!\" opera como um sinal de negação/diferença\n\n!(\"eu\" %in% c(\"vc\",\"todo mundo\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Comandos relacionais\n\nAs operações relacionais são usadas para combinar ou inverter condições. No R, você tem três operadores principais:\n\nAND (&): Retorna TRUE se ambas as condições forem verdadeiras.\n\nOR (|): Retorna TRUE se pelo menos uma condição for verdadeira.\n\nNOT (!): Inverte o valor lógico, transformando TRUE em FALSE e vice-versa.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"|\" para \"OU\"\n2 > 2 | 2 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n2 > 2 | 2 < 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# \"&\" para \"E\"\n2 > 2 & 2 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n2 > 1 & 2 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Comandos condicionais\n\nAs operações lógicas e relacionais são ferramentas fundamentais no R. Elas ajudam a fazer muitos manuseios básicos e dados, como filtro de casos, seleção e recodificação de variáveis.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}