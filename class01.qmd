# Capítulo 1 {.unnumbered}

## É de comer?

O R é uma linguagem de programação, o que significa que podemos utilizá-la para nos comunicar com o computador. Isto é, seguimos a sintaxe da linguagem para usar comandos que orientam o computador a executar operações. Uma definição mais específica do R é a de linguagem voltada a objetos. Isso porque o R fuciona muito direcionado às informações guardadas como objetos na memória.

Como uma linguagem, o R tem uma sintaxe e para dominá-la precisamos praticar. Por isso este livro é mesclado entre explicações e exemplos práticos. Não é pavê, nem pacumê. É pa praticar!

### Mas... por que o R e não outro?

O que torna o R especial para a pesquisa é ter sido desenvolvido para fins estatísticos, que ao longo do tempo tomou a forma de Ciência de Dados. Os autores da linguagem são os estatísticos Ross Ihaka (neozelandês) e Robert Gentleman (canadense). Eles iniciaram o projeto em meados dos anos 1990, tendo circulado a primeira cópia do arquivo binário, embrião do R, em uma lista de e-mails de pesquisadores que trabalhavam com a linguagem S, chamada *s-news*.

Com a circulação do projeto, Ross e Robert receberam uma indicação de Martin Mächler, professor no Departamento de Matemática da Universidade de Zurique (Suiça), para associarem o software ao projeto GNU, de desenvolvimento de softwares livres. Os autores acataram a ideia e em junho de 1995 estava disponível o código fonte do R sob licença da *GNU Free Software Foundation.* Essa história foi contada no artigo *R: A Language for Data Analysis and Graphics* [@ihaka_r_1996], onde os autores apresentaram o projeto publicamente para a comunidade acadêmica. Depois disso o projeto ganhou adesão e força. No ano seguinte, em 1997, foi fundado o *R Core Group*, composto por pessoas responsáveis pelo controle da versão do código fonte, que atualmente gere o *Comprehensive R Archive Network* ([CRAN](https://cran.r-project.org/)), onde são registradas e distribuídas as atualizações do R. A versão 1.0 do R foi divulgada em 2002 e passou por diversas atualizações até chegar a atual 4.4.1.

Até 2009, o R era usado por estatísticos, cientistas da computação e pesquisadores engajados com este tipo de expertise. O cenário mudou com o desenvolvimento de um ambiente integrado de trabalho, o RStudio, que facilitou o fluxo. Além disso, em 2016, o então cientista chefe da empresa RStudio, Hadley Wickham, em colaboração com Garrett Grolemund, concretizou o projeto *Tidy Data* [@wickham2014], visando aprimorar o manuseio de dados, publicando um conjunto de funções em pacotes voltados para a análise de dados, todos integrados ao *Tidyverse*. O projeto foi costruído por quatro princípios: 1. reutilização de estrutura de dados existentes; 2. composição de funções simples com o *pipe*; 3. incetivar programação que seja funcional e; 4. códigos que seja interpretáveis para humanos. Por enquanto estamos conhecendo a história, mas a transformação que isso causou será percebida quando começarmos a utilizar o pacote *tidyverse*.

> > > > *It is often said that 80% of data analysis is spent on the process of cleaning and preparing the data (Dasu and Johnson 2003). Data preparation is not just a first step, but must be repeated many times over the course of analysis as new problems come to light or new data is collected. Despite the amount of time it takes, there has been surprisingly little research on how to clean data well. Part of the challenge is the breadth of activities it encompasses: from outlier checking, to date parsing, to missing value imputation. To get a handle on the problem, this paper focuses on a small, but important, aspect of data cleaning that I call data tidying: structuring datasets to facilitate analysis.* [@wickham2014, p. 1]

Perceba que toda a história do R foi construída na contramão dos softwares de mercado, como o *Statistical Package for Social Sciences* (SPSS), produto da IBM, e o Pacote Office, produto da Microsoft. Trata-se de um projeto conduzido por pesquisas acadêmicas de ponta, visando facilitar o trabalho com a análise de dados. Trabalhar com o R, portanto, implica em um outro paradigma. Ao invés de ter o software como um produto administrado por uma empresa, onde as funções já estão programadas e disponíveis por botões e comandos, temos uma linguagem a partir da qual podemos programar funções e executar comandos diversos. Há diversas implicações nessa mudança que transformaram completamente o trabalho com dados nas Ciências Sociais, permitindo maior abertura para a criatividade e replicabilidade. Todo o nosso fluxo de trabalho é escrito em um documento, que pode ser compartilhado com outras pessoas, que podem verificar o passo-a-passo e replicar. Além disso, a forma como utilizamos o software possibilita eficiência nos processamentos, com baixo custo de tempo e recursos de hardware. Veremos isso ao longo o curso.

### O uso de linguagem de programação nas Ciências Sociais

Dados e metodologias são os principais elementos para o trabalho com pesquisa e operacionalização de teorias. Em geral, formulamos hipóteses sobre o mundo informadas por literaturas específicas, e testamos essas hipóteses coletando dados e utilizando metodologias. As linguagens de programação nos ajudam na parte operacional de tratamento e análise dos dados.

Ser parte do Projeto GNU de softwares livres é o primeiro ponto forte do R. Além disso, podemos destacar outros pontos importantes do R, como:

-   **Eficiência:** o fluxo de trabalho com funções reduz o custo de memória e processamento.

<!-- -->

-   **Potência:** não estamos mais limitados às funções programadas no software, como é vendido. Podemos programar funções novas e fazer (quase) tudo com R. Excel e SPSS estão anos atrás!

-   **Replicabilidade e transparência:** os procedimentos são registrados em código, portando mais transparentes e possíveis de serem replicados. Práticas fundamentais e cada vez mais impulsionadas por revistas e instituições acadêmicas.

-   **Popularidade:** movido por uma comunidade internacional extensa, que desenvolve e acompanha o software. Cada vez mais adotado em instituições (principalmente públicas) e pela comunidade acadêmica.

O manuseio e a análise de dados é um desafio de longa data. Do ponto de vista do armazenamento e processamento, a principal pesquisa nacional, o Censo Demográfico, já era um desafio desde, pelo menos, 1960 ([para saber mais sobre a história dos censos](https://www.scielo.br/j/nec/a/nJnk3y84WffXCjwp76FNjJr/)). Uma área que emergiu diante desses desafios é a de Ciências Sociais Computacionais, que aborda desde o desenvolvimento de algoritmos para a extração e análise de dados até a discussão teórica sobre ambientes digitais.

Ainda que a programação esteja relacionada com lógica e cálculo, não se trata apenas de informações quantitativas. Podemos tratar, além dos famosos *surveys*, também dados não estruturados, textos, imagens, sons e tudo o mais que puder ser registrado. Tudo isso torna mais atraente a análise de dados com uso de programação.

Se você é uma pessoa curiosa e que quer explorar a criatividade, a sofisticação e a elegância em seu trabalho, está no lugar certo.

## Entendi. Então como eu uso?

Como vimos, o R é pa praticar! Então vamos colocar nossas ferramentas em mãos.

É fudamental saber que o R é a linguagem, e o RStudio é o ambiente de desenvolvimento. Não adianta tentar usar o RStudio sem o R. Portanto, faça a instalação do R e RStudio de acordo com as especificações do seu computador.

Para começar a usar o R, é preciso entender o que são e como funcionam as operações básicas. Toda linguagem de programação tem uma sintaxe e as mesmas operações básicas. Neste capítulo, veremos os comandos básicos para guardar valores na memória e manuseá-los, operações com vetores e data.frames (dados estruturados) e como usar funções e operações de lógica.

Como uma experiência antropológica ~~e de choque~~ , abra o R (não o RStudio!). Caso tenha dificuldade em encontrar o software, digite na busca do seu computador apenas a letra "R" e procure em aplicativos.

Você deve abrir algo parecido com a janela da [Figura @fig-rconsole].

![Console R](images/cosole-r.png){#fig-rconsole}

A janela onde escrevemos as linhas de comandos executáveis chamamos de "console". Abrindo o R diretamente, temos apenas a janela do console para inserir os comandos. Triste, né? Mas tudo fica mais *sexy* com o RStudio. Para fins didáticos, vamos continuar com o R base. Precisamos olhar um pouco para o console como faziam os egípcios e os hebreus.

Neste livro, por ser escrito no R, temos as linhas de comando destacadas, que podem ser copiadas e coladas no console para executar.

### Primeiro contato: R como calculadora

Executar cálculos simples com o R é uma forma mais amigável de começar entender como a linguagem funciona. Podemos pensar no computador como uma grande calculadora que computa operações e, no R, como um meio para comandar o computador.

Por exemplo, no comando abaixo, eu computo um cálculo simples no R e, em seguida, recebo um resultado. Faça o mesmo no console do R base. Digite 1+2 e dê um enter para computar

```{r}
1+2
```

Legal, não é? Talvez não ainda. Mas vai ficar!

Além de números e cálculos, podemos executar outros tipos de informações como caracteres (texto) e valores lógicos (Verdadeiro e Falso). Para caracteres, devemos sempre utilizar aspas simples ou duplas, conforme a linha abaixo.

```{r}
"Utilize sempre aspas para informações textuais"
```

Para valores lógicos, usamos o inglês TRUE e FALSE, que podem ser abreviados pelas iniciais T e F, conforme a linha abaixo.

```{r}
TRUE
FALSE

T
F
```

Com o tempo, vamos escrevendo códigos (*scripts*) que compilam um conjunto sequencial de comandos. Os códigos vão ficando cada vez mais complexos na medida em que vamos trabalhando. Um recurso muito importante para torná-los interpretáveis para humanos são os comentários. Para que o R não interprete uma linha de um documento como um comando, devemos marcá-la com "\#". Toda informação que vem depois de um "\#", na linha, é descosiderada pelo R.

```{r}
# Este comentário não é executado. Simples assim.
```

Como exercício, escreva um comentário e execute no console do R base. Depois escreva o mesmo sem a marcação de comentário.

Você vai perceber que, sem indicar que e um comentário (#), o R tenta computar os valores e retorna erro, porque não consegue identificar nada associado.

Em geral, números, caracteres, valores lógicos e comentários compõem a base fundamental da linguagem R.

Vamos fazer um exercício didático para introduzir o uso de códigos. Copie as linhas de comando abaixo e cole na janela console, no R base. Você pode ir colando linha a linha e executado os comandos para observar o que acontece.

```{r, eval=F}
# Primeiro código com o R
# Autor: Victor G Alcantara

# R como calculadora

## Fazedo cálculos simples
1+2

3+5*4

10/2

## Computando texto
"Trabalhar com programação é desafiador"

## Computado valores lógicos
TRUE

FALSE
```

Uma vez compreedendo as bases, podemos operá-las utilizando a memória do computador.

Para guardar valores na memória, como objetos, utilizamos os sinais se atribuição "\<-" e "=".

-   Sinais de atribuição de valores à memória:

    -   Seta: objeto \<- valor

    -   Um igual: objeto = valor

```{r}
resultado <- 1+2

resultado
```

No exemplo acima, guardamos o cálculo 1+2 no objeto "resultado", armazenado na memória. Perceba que estamos interpretando a linha de código. O que o R interpreta é o mesmo. Podemos ler como: atribua ao objeto "resultado" o valor da conta 1+2.

Uma vez guardado na memória, podemos nos referir ao objeto para acessar o valor, conforme ilustra o exemplo abaixo.

```{r}
resultado + 1
```

Para guardar mais de um valor em um objeto, devemos utilizar uma função para concatenar os valores, expressa por um "c" seguido de parêteses e os valores contidos, separados por vírgula.

```{r}
valores_num <- c(1,2,3,4,5)

valores_num
```

Podemos fazer operações com todos os valores guardados em um objeto. Por definição, chamamos um objeto que contenha apenas um tipo ou classe de valores como um **vetor**. Podemos dizer, assim, que criamos um vetor guardado no objeto "valores_num" que recebe os valores de 1 a 5.

Podemos fazer operações com nosso vetor, como no exemplo abaixo.

```{r}
1 + valores_num
```

Toda vez que nos referirmos ao nome do objeto guardado, sem o uso de aspas, o R vai entender que estamos nos referindo a todos os valores guardados no vetor. Por isso a soma 1 + vetor tem como resultado todos os valores + 1.

Para acessar um valor específico em um vetor, podemos indicar a localização do valor utilizando colchetes \[ \].

vetor\[ posição do valor \]

```{r}
valores_num[3] # Obtendo o valor guardado na posição 3
```

Um vetor guarda sempre um tipo ou classe de valores. Podemos fazer operações que sejam adequadas a cada tipo de valor contido. Por exemplo, para vetores que guardam textos, não podemos fazer cálculos (o R retornará como erro).

```{r}
valores_chr <- c("A","B","C","D","E")
valores_chr

valores_chr[1] # Obtendo o valor guardado na posição 1
valores_chr[3] # Obtendo o valor guardado na posição 3
```

```{r, error = TRUE}
valores_chr + 1
```

Não se assuste com a mensagem de erro. Ela sempre aparecerá com alguma explicação que te ajudará a entender. Neste caso, ele está dizendo que o argumento não é um valor numérico para fazer cálculo. O R se esforça para ser nosso amigo e muitas vezes, quando notar que pode ter algo errado, vai nos avisar com *Warning*.

Embora tente ser nosso amigo, ele pode te frustrar com a quantidade de problemas e erros que aparecerão no seu caminho. Mas nunca se esqueça de que o R é burro e o inteligente é você.

Até aqui vimos o suficiente do R base. Agora, precisamos do RStudio para avançar de uma forma mais atrativa.

### Explorado comandos com RStudio

Abra o RStudio no seu computador.

Você deve abrir algo parecido com a [Figura @fig-rstudio]. Uma das inovações deste ambiente de trabalho é dividir o fluxo em quatro janelas: 1) script; 2) console; 3) gestão de aquivos e *outputs* e; 4) ambiente global (gestão de memória).

![RStudio Layout](images/layout-rstudio.png){#fig-rstudio}

-   <div>

    1.  **Editor de Scripts**: Essa janela é sua amiga da organização! É onde você escreve e salva seu código em arquivos. Em vez de rodar cada comando diretamente, você pode escrever vários comandos e depois executá-los da forma que quiser, selecionando partes ou tudo, quando estiver pronto.

    </div>

-   <div>

    2.  **Console**: É onde a mágica acontece! É a mesma janela que abrimos no R base. Aqui você executa comandos e vê os resultados imediatamente. Pense nele como uma "calculadora" poderosa: basta digitar o código, apertar Enter, e o R responde!

    </div>

-   <div>

    3.  **Files/Plots/Packages/Help**: Essa janela multifuncional é super versátil. No **Files**, você navega nos arquivos do projeto; em **Plots**, visualiza gráficos; em **Packages**, gerencia as bibliotecas instaladas; e em **Help**, encontra ajuda para funções e pacotes. É um verdadeiro canivete suíço para explorar recursos e referências do R!

    </div>

-   <div>

    4.  **Ambiente/Histórico**: Aqui fica o “quadro de controle” dos seus dados e variáveis. No **Ambiente**, você vê todas as variáveis e dados carregados na sessão, enquanto o **Histórico** mostra os comandos que você já executou. Se você quiser repetir ou ajustar um comando anterior, é só buscá-lo aqui.

    </div>

Agora, com o RStudio, registraremos nossos códigos no editor de script. Caso já não tenha um script R aberto, isto é, não esteja aparecedo a tela 1 do editor de script, crie uma nova no botão "+", localizado no canto superior esquerdo da tela. Perceba que podemos criar diversos tipos de arquivos para edição. O RStudio comporta, inclusive, arquivos para serem executados em outras linguagens, como Python, C++ e SQL.

Seguindo a sintaxe da linguagem e as funções disponíveis, escrevemos nossos códigos no editor de script. Em nosso curso, veremos comandos e funções importantes para importação, tratamento, manuseio e análise de dados. Mas para um bom domínio da ferramenta, é importante entendermos os fundamentos de como ela opera.

Por convenção, seguimos padrões de escrita do código, que chamamos de **identação**. A identação auxilia a deixar o código organizado e interpretável para humanos. Isso mesmo que você entendeu, identação é simplesmente uma foma convencional de organizar a escrita dos códigos. Mesmo os softwares de desenvolvimento, como o RStudio, são capazes de interpretar padrões de identação. Por exemplo, quando iserimos um comentário com "\#" e finalizamos com traços "----", o RStudio entende que se trata de um título para um segmento do código. Veremos como fazer isso mais pra frente.

Em geral, orgaizamos os códigos seguindo a lógica do fluxo de trabalho. Que pode ser descrito por:

-   **Setup e configurações básicas**
-   **Armazenamento e importação de dados**
-   **Manuseio de dados**
-   **Análise de dados**
-   **Exportação dos resultados**

Agora, vamos retomar os fundamentos da linguagem R em um script organizado usando o RStudio.

### Funções

Além dos comandos básicos, podemos também usar funções, que são comandos já programados para executar determinados procedimentos. Elas são algoritmos que fazem um determinado procedimento. São caixas pretas onde colocamos um *input* e recebemos um *output*.

A estrutura das funções no R é a seguinte: escrevemos o nome da função, seguido de parênteses dentro dos quais vão os argumentos de entrada (*inputs*).

***função*** ( argumento 1 = isso, argumento 2 = aquilo )

Por exemplo, a função "sum" faz a soma de um conjunto de valores, como o "=SOMA( )" no Excel.

```{r}
sum(1,2)
```

Algumas operações de cálculo também são codificadas como funções no R. É o caso de módulo para extrair valores absolutos e da raíz quadrada, por exemplo.

```{r}
abs(-4) # Função abs para extrair valores absolutos

sqrt(4) # Função sqrt (Square Root) para extrair raíz quadrada
```

Como demonstrado acima, a estrutura das funções no R é dada pelo nome da função (ex. "sum"), seguido de argumentos inseridos dentro de parênteses "( argumentos aqui )". Nem todas as funções exigem argumentos, mas todas as funções executam algum procedimento. Por exemplo, temos um conjunto de funções muito úteis para limpar a memória local (o que ajuda no processamento) e obter o diretório (pasta) principal onde estamos trabalhando.

-   gc( ) : de "Garbage Clean", para limpeza da lixeira e liberação de memória.

-   getwd( ) : de "Get Working Directory", para obter diretório base no qual está trabalhando.

```{r}
gc()  

getwd()
```

Há um conjunto extenso de funções de base do R, que já vem com o software na instalação. Existem especialmente funções para gestão de memória, armazenamento, dados e estatística. Além do R base, há também um universo de funções programadas pela comunidade de usuários em diversos domínios, como ciências ambientais, psicologia, economia e até funções criadas por sociólogos! Diferente das funções do R base, essas estão associadas a pacotes externos que devem ser instalados e carregados. Isso veremos na próxima aula, quando abordaremos o manuseio de dados.

### Data.frame: dado estruturado

Com os comandos básicos que vimos anteriomente, vamos iniciar a construção de uma base de dados.

Vimos que um conjunto de valores de mesmo tipo/classe pode ser guardado em um vetor, armazenado na memória local como um objeto. Por definição, os vetores são represetados como colunas.

Temos um conjunto de funções úteis no manuseio de objetos, para saber o tamanho e o tipo/classe.

-   class( ) ou typeof( ) : funções para verificar o tipo de objeto

-   lenght( ) : função para verificar o tamanho do objeto

```{r}
# Vetor de nomes, do tipo caracteres (chr)
nome <- c("Carlos","Maria","Renata","Cleber","Joana")

# Vetor de idade, do tipo numérico (num)
idade <- c(18,14,45,16,33)

# Vetor de posicionamento político à esquerda, do tipo lógico
esquerda <- c(T,F,T,F,T)

# verificando o tipo/classe dos vetores
class(nome)
class(idade)
class(esquerda)

# verificando tamanho dos vetores
length(nome)
length(idade)
length(esquerda)
```

Conforme veremos a seguir, essas funções valem também para outros tipos de objeto, como o data.frame.

Quando temos vetores de igual tamanho (com a mesma quantidade de valores), podemos uni-los em uma nova estrutura de dados, chamada data.frame. O data.frame é a famosa estrutura retangular de dados que conhecemos, com os casos nas linhas e variáveis nas colunas, como no *survey* tradicional. Portanto, para criar uma base de dados no R, basta ter os vetores de igual tamanho e uni-los em um data.frame.

```{r}
# Construindo base de dados com vetores de igual tamanho
meus_dados <- data.frame(nome,idade,esquerda)

class(meus_dados)

meus_dados
```

Observe que cada vetor contido na base de dados é de um tipo. Todo o tratamento e análise das variáveis depende disso, como veremos adiante.

Quando tratamos de vetores, vimos que para acessar os valores contidos era peciso usar colchetes e o endereço do valor. Agora, com data.frame/dados estruturados, precisamos indicar duas entradas para localizar o valor \[ linha , coluna \].

```{r}
# Localizando o terceiro valor do vetor "nome"
nome[3]

# Localizando o nome "Renata" na base estruturada
meus_dados[3,1] # Linha = 3, Coluna = 1
```

Quando não inserimos nada, o R entende que não estamos especificando a localização e, assim, queremos tudo.

```{r}
meus_dados[,] # Todos os valores em todas as colunas

meus_dados[,2] # Todos os valores da coluna 2

meus_dados[3,] # Todos os valores na linha 3
```

Podemos também localizar mais de um valor, inserindo o conjunto específico de localização.

```{r}
meus_dados[ c(1,3) , 1 ]
```

Há também outro método para localizar valores em data.frame, usando o cifrão (\$). Quando inserimos o nome do objeto onde está guardada a nossa base de dados, podemos utilizar o cifrão para indicar a coluna que queremos acessar, como no exemplo a seguir.

```{r}
meus_dados$nome
```

Muitas vezes é mais prático manusear as variáveis usando a localização pelo cifrão. Podemos também combinar o cifrão com o colchetes, como a seguir:

```{r}
meus_dados$nome[2]
```

Esses são os métodos para localizar e selecionar valores com o R base. Mais a frente, veremos formas mais intuitivas de fazer isso. Mas é fundamental saber a base, porque todo o resto vem daqui.

### Relações lógicas

Agora que vimos o fundamento dos vetores e a construção de uma base de dados, vamos fechar este capítulo com um último tópico de fundamentos: as relações lógicas.

Podemos relacionar dois valores em testes lógicos que retornam um resultado. São quatro as formas principais de teste lógico:

1.  Se algo é maior que outro, usando o símbolo " \> "
2.  Se algo é menor que outro, usando o símbolo " \< "
3.  Se algo é igual a outro, usando " == "
4.  Se algo é diferente de outro, usando " != "
5.  Se algo está contido em outro, usando %in%
6.  Se algo não está contido em outro, usando a exclamação (!) com o %in% (isso não é tão simples, veja a estrutura nos exemplos)

Também podemos combinar as relações com:

1.  Maior ou igual "\>="
2.  Menor ou igual "\<= "

```{r}
# Relações lógicas são operações em que testamos uma sentença tendo como resultado: TRUE (T) ou FALSE (F)

2 >  2  # MAIOR QUE
2 < 2   # MENOR QUE
2 == 2  # IGUALDADE

2 >= 2 # MAIOR OU IGUAL

"eu" == "todo mundo" # Igualdade
"eu" == "eu"
"eu" != "vc"         # Diferença

# Por quê igualdade são dois sinais?
# R: Porque apenas um significa atribuição de valor. Igual a setinha.

# Teste em grupo
"eu" %in% c("vc","todo mundo") # Generalização - se contém

# Nota importante: "!" opera como um sinal de negação/diferença

!( "eu" %in% c("vc","todo mundo") )
```

As relações lógicas são fundamentos da programação e podemos usar em muitos comandos. Por exemplo, para filtrar e selecionar nosso banco de dados. Antes de entrar nesses procedimetos, vamos usar fazer alguns testes lógicos usando nosso banco de dados. Tente ler e interpretar os seguintes testes:

```{r}
meus_dados[ 1 , 2 ] >= meus_dados[ 5 , 2 ]

# Leitura: o valor da linha 1, coluna 2 é maior ou igual ao valor da linha 5, coluna 2?
```

```{r}
meus_dados[  , 2 ] >= 18

# Leitura: os conjunto de valores da coluna 2 (idade) é maior ou igual a 18?

```

Agora, usaremos o resultado do teste lógico para filtrar os casos da nossa base de dados. Primeiro, é preciso guardar o resultado do teste lógico em um objeto.

```{r}
maior_ou_igual_18 <- meus_dados[  , 2 ] >= 18
maior_ou_igual_18
```

Agora, utilizaremos os valores para filtrar os casos nas linhas. Quando o valor lógico é igual à TRUE, o R retorna o valor, quando é FALSE, não retorna.

```{r}
# Exemplo antes de complexificar
meus_dados[ c(F,F,T,F,F) , ]

# No exemplo acima, indicamos somente o terceiro valor como TRUE, para filtrar.

meus_dados[ maior_ou_igual_18 , ]

```

Não se assuste com o uso da lógica para manusear os dados. Mais a frente, veremos caminhos para executar esses comandos de uma forma mais amigável e intuitiva, seguindo os passos do projeto *tidy data* do Hadley Wickham, especialmente o princípio de escrita de códigos interpretáveis para humanos.

## Recaptulando

Neste capítulo, vimos que o R não é de comer, mas de praticar. Passamos pela sintaxe e pelos primeiros comandos fundamentais, que são a base para todas as operações nesta e em outras linguagens de programação. Vimos sobre as funções, como são estuturadas no R e como usá-las. Por fim, vimos como construir um data.frame a partir de vetores de igual tamanho e as relações lógicas entre valores.

Na próxima aula, iniciaremos retomando as relações lógicas e veremos as relações condicionais. Faremos alguns exercícios usando elas para manusear dados e, depois, partiremos para o uso de pacotes para importar e manusear dados estruturados.

### Extra: Google Colab

Uma alternativa para trabalhar com o R é usar o ambiente virtual da Google: o *Google Colaboratory* ou simplesmente Colab. Para isso, basta fazer login com uma conta google e criar um *notebook.* Para trabalhar com o R, é necessário editar as configurações. Para isso, vá em editar \> configurações do notebook \> altere de Python 3 para R.

![Passo 01 - Google Colab](images/step00%20-%20colab.png){#fig-gcolab1}

![Passo 2 - Google Colab](images/step01%20-%20colab.png){#fig-gcolab2}

Diferente do RStudio, o Google Colab possui apenas uma janela principal que intercala texto e blocos de códigos. O uso é bastante intuitivo, embora os recursos sejam limitados. Para obter maior capacidade de processamento e memória, é necessário pagar.

## Desafio

Utilizado o RStudio ou Google Colab, exercite os conhecimentos tratados neste capítulo no desafio a seguir.

```{r}
# Desafio ----
# Autor: Seu nome aqui

# 1. Crie três objetos que guardam vetores com valores 
# de tipos diferentes (numérico, caracteres e lógicos)

# 2. Verifique se os vetores têm a mesma quantidade de valores

# 3. Crie um data.frame/base de dados com os vetores

# 4. Localize o valor guardado na posição 
# seus_dados[2,1] : segunda linha e terceira coluna

# 5. Faça um teste lógico para verificar se o primeiro valor do vetor
# numérico é maior ou igual ao último valor do vetor numérico da sua
# base de dados
```
