theme_minimal() +
labs(x="",y="", fill = "Percentual") +
theme(legend.position = "none")  # Rotacionar os textos do eixo x
# Construção índice
p_load(psych,polycor,corrplot)
mcor <- hetcor(mydata[,75:77])
mcor <- mcor$correlations
export(mcor,'mcor.xlsx')
# Análise fatorial com 1 fator
fa_result <- fa(mcor, nfactors = 1, fm = "ml") # "ml" é máxima verossimilhança (maximum likelihood)
# Extraindo as cargas fatoriais
cargas <- fa_result$loadings[, 1]
table(mydata[,75])
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77], as.numeric)
View(data_num)
table(mydata[,75])
class(mydata[,75])
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77], levels)
View(data_num)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77], parse_number)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77], as.numeric)
View(data_num)
table(mydata[,75])
class(mydata[,75])
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- mydata[,75:77]
ia_fa <- data_num %*% cargas
View(data_num)
data_num <- data_num %>% mutate(.,
p45a=case_when(
p45a == -2 ~ -2,
p45a == -1 ~ -1,
p45a == -0 ~ 0,
p45a == 1 ~ 1,
p45a == 2 ~ 2,
),
p45b=case_when(
p45a == -2 ~ -2,
p45a == -1 ~ -1,
p45a == -0 ~ 0,
p45a == 1 ~ 1,
p45a == 2 ~ 2,
),
p45c=case_when(
p45a == -2 ~ -2,
p45a == -1 ~ -1,
p45a == -0 ~ 0,
p45a == 1 ~ 1,
p45a == 2 ~ 2,
)
)
ia_fa <- data_num %*% cargas
View(data_num)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric) %>% as.data.frame()
View(data_num)
data_num <- data_num %>% mutate(.,
p45a=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
),
p45b=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
),
p45c=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
)
)
View(data_num)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric) %>% as.data.frame()
View(data_num)
data_num <- data_num %>% mutate(.,
p45a=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
),
p45b=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
),
p45c=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
)
)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric) %>% as.data.frame()
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric)
data_num <- data_num %>% mutate(.,
p45a=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
),
p45b=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
),
p45c=case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~ 0,
p45a == 4 ~ 1,
p45a == 5 ~ 2,
)
)
View(data_num)
view(mydata[,75:77])
table(mydata[,75])
mydata[,75:91] = lapply(X = mydata[,75:91],
FUN = function(x){x = factor(x,
levels=c(2,1,0,0,-1,-2),
labels=c(2,1,0,0,-1,-2),
ordered = T);
#x = as.numeric(x)
}) %>% as.data.frame()
table(mydata[,75])
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric)
View(data_num)
labels(mydata[,75])
levels(mydata[,75])
# Indicador de autoritarismo
mydata[,75:91] = lapply(X = mydata[,75:91],
FUN = function(x){x = factor(x,
levels=c(1:6),
labels=c(2,1,0,0,-1,-2),
ordered = T);
#x = as.numeric(x)
}) %>% as.data.frame()
table(mydata[,75])
class(mydata[,75])
as.numeric(mydata[,75]) %>% head %>%  view()
mydata[,75] %>% head %>%  view()
mydata[,75] %>% tail %>%  view()
mydata[,75] %>% head(5) %>%  view()
mydata[,75] %>% head(50) %>%  view()
mydata[,75] %>%  view()
cis0716 <- import("BD_CIS0716.SAV")
names(cis0716)
table(cis0716$sexo)
mydata <- cis0716 %>% mutate(.,
sexo = case_when(
sexo == 1 ~ "M",
sexo == 2 ~ "F"
),
raca = case_when(
cor == 1 ~ "Branca",
cor == 2 ~ "Preta",
cor == 3 ~ "Parda",
cor == 4 ~ "Amarela",
cor == 5 ~ "Indígena"
),
raca2 = case_when(
cor == 1 ~ "Branca",
cor == 2 ~ "Negra",
cor == 3 ~ "Negra",
),
idad = idade1,
educ = factor(escola,
levels=c(1:8),
labels = c(
'Analfabeto/ Primário ou fundamental I incompleto',
'Primário ou fundamental I completo/ Ginasial ou fundamental II incompleto',
'Ginasial ou fundamental II completo',
'Colegial ou ensino médio incompleto',
'Colegial ou ensino médio completo	',
'Superior completo',
'Superior incompleto	',
'Pós-graduação'),
ordered=T),
educ2 = factor(escola,
levels=c(1:8),
labels = c(
'Educação Básica incompleta',
'Educação Básica incompleta',
'Educação Básica incompleta',
'Educação Básica incompleta',
'Educação Básica completa',
'Superior completo',
'Educação Básica completa',
'Superior completo'),
ordered=T)
)
# Indicador de medo
vars <- paste0("p41a",letters[1:16])
mydata[,vars] = lapply(X = mydata[,vars],
FUN = function(x){x = ifelse(x == 2,0,x);
x = as.numeric(x)
}) %>% as.data.frame()
table(mydata$p41aa)
t = mydata[,vars]
t = rowSums(t)
mydata$im <- t
# Indicador de autoritarismo
mydata[,75:91] = lapply(X = mydata[,75:91],
FUN = function(x){x = factor(x,
levels=c(1:6),
labels=c(2,1,0,0,-1,-2),
ordered = T);
#x = as.numeric(x)
}) %>% as.data.frame()
vars <- paste0("p45",letters[1:3])
plots <- list()
table(mydata[,75])
mydata[,75] %>%  view()
as.numeric(mydata[,75]) %>%  view()
mydata[,75] %>%  view()
as.numeric(mydata[,75]) %>%  view()
levels(mydata[,75]) %>%  view()
attr(mydata[,75]) %>%  view()
attr(mydata[,75],labels) %>%  view()
attr(mydata[,75],which = 'labels') %>%  view()
attr(mydata[,75],which = 'levels') %>%  view()
attr(mydata[,75],which = 'level') %>%  view()
attr(mydata[,75],which = 'label') %>%  view()
attr(mydata[,75],which = 'names') %>%  view()
attr(mydata[,75],which = 'class') %>%  view()
attr(mydata[,75],which = 'names') %>%  view()
mydata[,75] %>%  view()
parse_number(mydata[,75]) %>% view()
parse_number(mydata[,75]) %>% view()
as.double(mydata[,75]) %>% view()
[mydata[,75]]
-2:2
t <- mydate %>% select(p45a) %>% mutate(.,
p45a = factor(p45a,
levels=c(-2:2),
labels=c(-2:2)
)
)
t <- mydata %>% select(p45a) %>% mutate(.,
p45a = factor(p45a,
levels=c(-2:2),
labels=c(-2:2)
)
)
View(t)
t <- mydata %>% select(p45a) %>% mutate(.,
p45a = factor(p45a,
levels=c(-2:2),
labels=c(-2:2)
)
p45a = as.numeric(p45a)
t <- mydata %>% select(p45a) %>% mutate(.,
p45a = factor(p45a,
levels=c(-2:2),
labels=c(-2:2)
),
p45a = as.numeric(p45a)
)
View(t)
t <- mydata %>% select(p45a) %>% mutate(.,
p45a = factor(p45a,
levels=c(-2:2),
labels=c(-2:2)
),
#p45a = as.numeric(p45a)
)
View(t)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric)
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric) %>% as.data.frame()
View(data_num)
str(data_num)
data_num <- data_num %>% mutate(.,
p45a = case_when(
p45a == 1 ~ -2,
p45a == 2 ~ -1,
p45a == 3 ~  0,
p45a == 4 ~  1,
p45a == 5 ~  2,
),
p45b = case_when(
p45b == 1 ~ -2,
p45b == 2 ~ -1,
p45b == 3 ~  0,
p45b == 4 ~  1,
p45b == 5 ~  2,
),
p45c = case_when(
p45c == 1 ~ -2,
p45c == 2 ~ -1,
p45c == 3 ~  0,
p45c == 4 ~  1,
p45c == 5 ~  2,
),
)
View(data_num)
table(data_num[,1])
# Calculando o índice como uma combinação linear ponderada das variáveis originais
# Normalizando as variáveis ordinais para valores numéricos antes de calcular o índice
data_num <- sapply(mydata[,75:77],as.numeric) %>% as.data.frame()
str(data_num)
data_num <- data_num %>% mutate(.,
p45a = case_when(
p45a == 5 ~ -2,
p45a == 4 ~ -1,
p45a == 3 ~  0,
p45a == 2 ~  1,
p45a == 1 ~  2,
),
p45b = case_when(
p45b == 5 ~ -2,
p45b == 4 ~ -1,
p45b == 3 ~  0,
p45b == 2 ~  1,
p45b == 1 ~  2,
),
p45c = case_when(
p45c == 5 ~ -2,
p45c == 4 ~ -1,
p45c == 3 ~  0,
p45c == 2 ~  1,
p45c == 1 ~  2,
),
)
table(data_num[,1])
ia_fa <- data_num %*% cargas
# agora indicador médio
ia <- rowSums(data_num)
# Guarda o indicador na base principal
mydata[,"ia"] <- ia/3
mydata <- mydata %>% mutate(.,
medo = case_when(
im %in% 1:4 ~ "Baixo",
im %in% 5:8 ~ "Moderado",
im %in% 9:12 ~ "Alto",
im %in% 13:16 ~ "Muito Alto",
),
medo = factor(medo,
levels = c("Baixo",'Moderado',
'Alto','Muito Alto'),
ordered = T
),
autoritarismo = case_when(
ia %in% 1:3 ~ "Menos autoritário",
ia %in% 4:6 ~ "Mais autoritário",
),
autoritarismo = factor(autoritarismo,
levels = c("Menos autoritário",
'Mais autoritário'),
ordered = T
),
)
table(mydata$medo)
table(mydata$autoritarismo)
sjt.xtab(var.row = mydata$autoritarismo,var.col = mydata$medo,
show.col.prc = T,encoding = "UTF-8",tdcol.col = "A03322",
file = "tabela.xls")
# Criar um design de pesquisa ponderado
mdt.survey <- svydesign(ids = ~1, data = mydata, weights = ~peso)
bdm <- mydata %>% filter(sexo == "M")
bdf <- mydata %>% filter(sexo == "F")
weighted.mean(bdm$ia, bdm$peso,na.rm = T)
weighted.mean(bdf$ia, bdf$peso,na.rm = T)
# Teste t ponderado
svyttest(ia ~ sexo, mdt.survey)
# Raca
bdb <- mydata %>% filter(raca2 == "Branca")
bdn <- mydata %>% filter(raca2 == "Negra")
weighted.mean(bdb$ia, bdb$peso,na.rm = T)
weighted.mean(bdn$ia, bdn$peso,na.rm = T)
# Teste t ponderado
svyttest(ia ~ raca2, mdt.survey)
# Escolaridade
bde1 <- mydata %>% filter(educ2 == "Educação Básica incompleta")
bde2 <- mydata %>% filter(educ2 == "Educação Básica completa")
bde3 <- mydata %>% filter(educ2 == "Superior completo")
weighted.mean(bde1$ia, bde1$peso,na.rm = T)
weighted.mean(bde2$ia, bde2$peso,na.rm = T)
weighted.mean(bde3$ia, bde3$peso,na.rm = T)
table(mydata[,75])
mean(mydata[,75])
mean(mydata[,75],na.rm=T)
mean(mydata[,75],na.rm=T)
mean(data_num[,1],na.rm=T)
table(data_num[,1])
mean(data_num[,2],na.rm=T)
table(data_num[,2])
# Criar um design de pesquisa ponderado
mdt.survey <- svydesign(ids = ~1, data = mydata, weights = ~peso)
bdm <- mydata %>% filter(sexo == "M")
bdf <- mydata %>% filter(sexo == "F")
weighted.mean(bdm$ia, bdm$peso,na.rm = T)
weighted.mean(bdf$ia, bdf$peso,na.rm = T)
# Teste t ponderado
svyttest(ia ~ sexo, mdt.survey)
# Raca
bdb <- mydata %>% filter(raca2 == "Branca")
bdn <- mydata %>% filter(raca2 == "Negra")
weighted.mean(bdb$ia, bdb$peso,na.rm = T)
weighted.mean(bdn$ia, bdn$peso,na.rm = T)
# Escolaridade
bde1 <- mydata %>% filter(educ2 == "Educação Básica incompleta")
bde2 <- mydata %>% filter(educ2 == "Educação Básica completa")
bde3 <- mydata %>% filter(educ2 == "Superior completo")
weighted.mean(bde1$ia, bde1$peso,na.rm = T)
weighted.mean(bde2$ia, bde2$peso,na.rm = T)
weighted.mean(bde3$ia, bde3$peso,na.rm = T)
ls()
rm(list=ls())
gc()
library(rio)
library(tidyverse)
getwd()
help(package ="rio")
help(import, package = rio)
setwd("D:/01 - data/R-Intro/d2")
dadostrabalho = import("Tabela 4.11 - 1-1.xls")
names(dadostrabalho)
str(dadostrabalho)
View(dadostrabalho)
dadospiramide = import("Censo 2022 - Pirâmide etária - Brasil.csv")
names(dadospiramide)
str(dadospiramide)
View(dadospiramide)
filtro1 = dadospiramide [,"Grupo de idade"] = "60 a 64 anos"
dadospiramidefiltrados = dadospiramide [filtro1, c(2,3)]
View(dadospiramidefiltrados)
library(tidyverse)
library(rio)
library(tidyverse)
import(file.choose())
ls() : #listar objetos guardados na memória
rm(list = ls()): #remover objetos da memória
gc() : #limpar a lixeira e liberar espaço.
# definir o local de trabalho
setwd("C:/Users/Windows 10/Documents")
ls() : #listar objetos guardados na memória
rm(list = ls()): #remover objetos da memória
gc() : #limpar a lixeira e liberar espaço.
# definir o local de trabalho
#setwd("C:/Users/Windows 10/Documents")
# Instalar pacotes
install.packages("rio")
# carregar pacotes
library(rio)
library(tidyverse)
dados <- import(file.choose())
# quantidade de linha e colunas: 1846 linhas e 29 colunas
dim(dados)
# primeiros valores da base
head(dados)
#últimos valores da base
tail(dados)
#nomes das colunas
names(dados)
#estrutura da base de dados
str(dados)
select_dados <- dados[, c("PESO", "RACACOR")]
# verificação
head(select_dados)
select_dados_tidyverse <- dados%>%select(LOCOCOR, PESO, RACACOR,
SEXO, IDADEMAE, ESCMAE)
#filtrar os casos com peso menor ou igual a 2500 g
select_dados_tidyverse<- select_dados_tidyverse %>% filter(PESO <= 2500)
dados_renomeados <- select_dados_tidyverse %>%
rename(Idade_materna=IDADEMAE,
Peso=PESO,
Raça_cor=RACACOR,
Sexo_recém_nascido=SEXO,
Local_obito=LOCOCOR,
Escolaridade_materna=ESCMAE)
View(dados_renomeados)
