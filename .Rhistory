ordered = T
),
autoritarismo = case_when(
ia %in% 1:3 ~ "Menos autoritário",
ia %in% 4:6 ~ "Mais autoritário",
),
autoritarismo = factor(autoritarismo,
levels = c("Menos autoritário",
'Mais autoritário'),
ordered = T
),
)
table(mydata$medo)
table(mydata$autoritarismo)
sjt.xtab(var.row = mydata$autoritarismo,var.col = mydata$medo,
show.col.prc = T,encoding = "UTF-8",tdcol.col = "A03322",
file = "tabela.xls")
# Criar um design de pesquisa ponderado
mdt.survey <- svydesign(ids = ~1, data = mydata, weights = ~peso)
bdm <- mydata %>% filter(sexo == "M")
bdf <- mydata %>% filter(sexo == "F")
weighted.mean(bdm$ia, bdm$peso,na.rm = T)
weighted.mean(bdf$ia, bdf$peso,na.rm = T)
# Teste t ponderado
svyttest(ia ~ sexo, mdt.survey)
# Raca
bdb <- mydata %>% filter(raca2 == "Branca")
bdn <- mydata %>% filter(raca2 == "Negra")
weighted.mean(bdb$ia, bdb$peso,na.rm = T)
weighted.mean(bdn$ia, bdn$peso,na.rm = T)
# Teste t ponderado
svyttest(ia ~ raca2, mdt.survey)
# Escolaridade
bde1 <- mydata %>% filter(educ2 == "Educação Básica incompleta")
bde2 <- mydata %>% filter(educ2 == "Educação Básica completa")
bde3 <- mydata %>% filter(educ2 == "Superior completo")
weighted.mean(bde1$ia, bde1$peso,na.rm = T)
weighted.mean(bde2$ia, bde2$peso,na.rm = T)
weighted.mean(bde3$ia, bde3$peso,na.rm = T)
table(mydata[,75])
mean(mydata[,75])
mean(mydata[,75],na.rm=T)
mean(mydata[,75],na.rm=T)
mean(data_num[,1],na.rm=T)
table(data_num[,1])
mean(data_num[,2],na.rm=T)
table(data_num[,2])
# Criar um design de pesquisa ponderado
mdt.survey <- svydesign(ids = ~1, data = mydata, weights = ~peso)
bdm <- mydata %>% filter(sexo == "M")
bdf <- mydata %>% filter(sexo == "F")
weighted.mean(bdm$ia, bdm$peso,na.rm = T)
weighted.mean(bdf$ia, bdf$peso,na.rm = T)
# Teste t ponderado
svyttest(ia ~ sexo, mdt.survey)
# Raca
bdb <- mydata %>% filter(raca2 == "Branca")
bdn <- mydata %>% filter(raca2 == "Negra")
weighted.mean(bdb$ia, bdb$peso,na.rm = T)
weighted.mean(bdn$ia, bdn$peso,na.rm = T)
# Escolaridade
bde1 <- mydata %>% filter(educ2 == "Educação Básica incompleta")
bde2 <- mydata %>% filter(educ2 == "Educação Básica completa")
bde3 <- mydata %>% filter(educ2 == "Superior completo")
weighted.mean(bde1$ia, bde1$peso,na.rm = T)
weighted.mean(bde2$ia, bde2$peso,na.rm = T)
weighted.mean(bde3$ia, bde3$peso,na.rm = T)
ls()
rm(list=ls())
gc()
library(rio)
library(tidyverse)
getwd()
help(package ="rio")
help(import, package = rio)
setwd("D:/01 - data/R-Intro/d2")
dadostrabalho = import("Tabela 4.11 - 1-1.xls")
names(dadostrabalho)
str(dadostrabalho)
View(dadostrabalho)
dadospiramide = import("Censo 2022 - Pirâmide etária - Brasil.csv")
names(dadospiramide)
str(dadospiramide)
View(dadospiramide)
filtro1 = dadospiramide [,"Grupo de idade"] = "60 a 64 anos"
dadospiramidefiltrados = dadospiramide [filtro1, c(2,3)]
View(dadospiramidefiltrados)
library(tidyverse)
library(rio)
library(tidyverse)
import(file.choose())
ls() : #listar objetos guardados na memória
rm(list = ls()): #remover objetos da memória
gc() : #limpar a lixeira e liberar espaço.
# definir o local de trabalho
setwd("C:/Users/Windows 10/Documents")
ls() : #listar objetos guardados na memória
rm(list = ls()): #remover objetos da memória
gc() : #limpar a lixeira e liberar espaço.
# definir o local de trabalho
#setwd("C:/Users/Windows 10/Documents")
# Instalar pacotes
install.packages("rio")
# carregar pacotes
library(rio)
library(tidyverse)
dados <- import(file.choose())
# quantidade de linha e colunas: 1846 linhas e 29 colunas
dim(dados)
# primeiros valores da base
head(dados)
#últimos valores da base
tail(dados)
#nomes das colunas
names(dados)
#estrutura da base de dados
str(dados)
select_dados <- dados[, c("PESO", "RACACOR")]
# verificação
head(select_dados)
select_dados_tidyverse <- dados%>%select(LOCOCOR, PESO, RACACOR,
SEXO, IDADEMAE, ESCMAE)
#filtrar os casos com peso menor ou igual a 2500 g
select_dados_tidyverse<- select_dados_tidyverse %>% filter(PESO <= 2500)
dados_renomeados <- select_dados_tidyverse %>%
rename(Idade_materna=IDADEMAE,
Peso=PESO,
Raça_cor=RACACOR,
Sexo_recém_nascido=SEXO,
Local_obito=LOCOCOR,
Escolaridade_materna=ESCMAE)
View(dados_renomeados)
if( 2 > 0 ) { print("Dois é maior que zero") }
if( 0 > 2 ) { print("Zero é maior do que dois") }
if( 0 > 2 ) { print("Zero é maior do que dois") } else{print("Zero NÃO É maior do que dois")}
ifelse(test = 0 > 2,yes = "Zero é maior", no = "Zero é menor")
meus.dados <- import(file.choose())
library(rio)
meus.dados <- import(file.choose())
View(meus.dados)
meus.dados <- import("G:/Meu Drive/02 - GitHub/R-Intro/A02 - Explore II/0 - data/mydata.RDS")
meus.dados$exemplo_dummy <- ifelse(meus.dados$gini > 0.6,
yes = "Muito desigual",
no = "Desigual")
view( meus.dados$exemplo_dummy )
View( meus.dados$exemplo_dummy )
View( meus.dados[,c("uf","exemplo_dummy")] )
View( meus.dados[,c("uf","gini","exemplo_dummy")] )
matrix(1:10,nrow=5,ncol = 2,byrow = T)
minha.matriz <- matrix(1:10,nrow=5,ncol = 2,byrow = T)
minha.matriz
minha.lista <- list(
nomes = c("Victor","Joana","Mateus","Karina"),
casos = 4,
matriz = matrix(1:4, nrow = 4,ncol = 1)
)
minha.lista
minha.lista <- list(
nomes = c("Victor","Joana","Mateus","Karina"),
casos = 4,
mydata = data.frame(letras=letters[1:4],numeros=1:4),
matriz = matrix(1:4, nrow = 4,ncol = 1)
)
minha.lista
minha.lista$mydata
minha.lista[[1]]
minha.lista[[1]][2]
minha.lista[[3]][,2]
minha.lista[[3]][,1]
View(meus.dados)
var_metrica_discreta <- sample(x = 1:100,size = 50,replace = F)
var_metrica_discreta
var_metrica_discreta <- runif(x = 100,min = 0,max = 100)
var_metrica_discreta <- runif(x = 1:100,min = 0,max = 100)
var_metrica_discreta <- runif(x = c(1:100),min = 0,max = 100)
urna = c(1:100)
var_metrica_discreta <- runif(x = urna,min = 0,max = 100)
var_metrica_discreta <- runif(n = 100,min = 0,max = 100)
var_metrica_discreta
var_metrica_discreta <- sample(x = 1:100,size = 50,replace = F)
var_metrica_discreta
var_metrica_discreta <- rnorm(n = 50,mean = 20,sd = 2)
var_metrica_continua <- c(77.2,60.1,55.4,22.6,10.2)
var_metrica_discreta <- round(var_metrica_continua)
var_metrica_continua
var_metrica_discreta
# Média
mean(var_metrica_continua)
# Quantis
quantile(x = mean(var_metrica_continua), probs = 0.5)
# Mediana
median(var_metrica_continua)
# Quantis
quantile(x = mean(var_metrica_continua), probs = 0.5)
# Média
mean(var_metrica_continua)
# Mediana
median(var_metrica_continua)
# Quantis
quantile(x = mean(var_metrica_continua), probs = 0.5)
# Quantis
quantile(x = mean(var_metrica_continua), probs = 0.51)
# Quantis
quantile(x = var_metrica_continua, probs = 0.5)
# Mediana
median(var_metrica_continua)
# Quantis
quantile(x = var_metrica_continua, probs = 0.5)
# Quantis
quantile(x = var_metrica_continua, probs = c(0.25,0.5,0.75))
# Amplitude
range(var_metrica_continua)
# Variância
var(var_metrica_continua)
# Desvio-padrão
sd(var_metrica_continua)
summary(var_metrica_continua)
# Tabela de frequência
table(meus.dados$exemplo_dummy)
meus.dados %>%
ggplot(aes(x=code_region))+
geom_bar()
library(tidyverse)
meus.dados %>%
ggplot(aes(x=code_region))+
geom_bar()
# Contínua
meus.dados %>%
ggplot(aes(x=rpct))+
geom_bar()
# Contínua
meus.dados %>%
ggplot(aes(x=rpct))+
geom_hist()
# Contínua
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram()
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 2)
summary(meus.dados$rpct)
View(meus.dados)
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 4)
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 1)
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 2)
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 4)
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 2)
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 2)+
scale_x_continuous(expand=c(0,0))
summary(meus.dados$rpct)
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 2)
# Contínua 1: boxplot
meus.dados %>%
ggplot(aes(x=rpct))+
geom_boxplot()
# Contínua 1: boxplot
meus.dados %>%
ggplot(aes(x=rpct))+
geom_density()
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram(bins = 200)
# Contínua 1: boxplot
meus.dados %>%
ggplot(aes(x=rpct))+
geom_density()
var_metrica_continua <- c(77.2,60.1,55.4,22.6,10.2)
var_metrica_continua
var_metrica_discreta <- round(var_metrica_continua)
var_metrica_discreta
# Média
mean(var_metrica_continua)
# Mediana
median(var_metrica_continua)
# Quantis
quantile(x = var_metrica_continua, probs = c(0.25,0.5,0.75))
# Amplitude
range(var_metrica_continua)
# Variância
var(var_metrica_continua)
# Desvio-padrão
sd(var_metrica_continua)
summary(var_metrica_continua)
library(psych)
describe(var_metrica_continua)
table(meus.dados$exemplo_dummy)+
addmargins()
table(meus.dados$exemplo_dummy) %>%
addmargins( )
table(meus.dados$exemplo_dummy) %>%
addmargins()
table(meus.dados$exemplo_dummy,useNA = "ifAny") %>%
addmargins()
table(meus.dados$exemplo_dummy,useNA = "ifany") %>%
addmargins()
prop.table( meus.dados$exemplo_dummy )
table(meus.dados$exemplo_dummy) %>% prop.table()
table(meus.dados$exemplo_dummy) %>% prop.table() %>% addmargins()
table(meus.dados$exemplo_dummy) %>%
addmargins() %>%
prop.table()
library(sjPlot)
names(meus.dados)
sjtab(data = meus.dados,name_region)
sjtab(data = meus.dados$name_region)
sjtab(data = meus.dados,fun = name_region)
sjtab(data = meus.dados,name_region)
sjtab(meus.dados$name_state)
??sjtab
tab_df(x = meus.dados$name_region)
tab_df(meus.dados,x = name_region)
tab_df(x = meus.dados)
tab_xtab(x = meus.dados$name_region)
sjt.xtab(var.row =  = meus.dados$name_region)
sjt.xtab(var.row = meus.dados$name_region)
sjt.tab(var.row = meus.dados$name_region)
sjtab(var.row = meus.dados$name_region)
library(kable)
library(pacma)
library(pacman)
p_load(kable)
kable(meus.dados$name_region)
library(kable)
p_load("kable")
meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar()
# Variáveis categóricas ordinais
meus.dados %>%
ggplot(aes(x = exemplo_dummy))+
geom_bar()
meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar()+
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta")
meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar()+
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta",
limits = c(0,10),
breaks = seq(0,10,2.5))
meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar(col="steelblue")+
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta",
limits = c(0,10),
breaks = seq(0,10,2.5))
meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar(fill="steelblue")+
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta",
limits = c(0,10),
breaks = seq(0,10,2.5))
meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar(fill="steelblue")+
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta",
limits = c(0,10),
breaks = seq(0,10,2.5))+
theme_classic()
meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar(fill="steelblue")+
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta",
limits = c(0,10),
breaks = seq(0,10,2.5))+
theme_bw()
plt1 = meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar(fill="steelblue")+
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta",
limits = c(0,10),
breaks = seq(0,10,2.5))+
theme_bw()
class(plt1)
plt1
plt1 = meus.dados %>%
ggplot(aes(x = name_region))+
geom_bar(fill="steelblue")
plt = plt1 +
scale_x_discrete(name="Regiões do Brasil")+
scale_y_continuous(name="Frequêcia absoluta",
limits = c(0,10),
breaks = seq(0,10,2.5))+
theme_bw()
plt
View(meus.dados)
library(plotly)
# Criar o gráfico 3D
fig <- plot_ly(meus.dados,
x = ~p_renda_10_ricos,
y = ~gini,
z = ~rpct,
type = 'scatter3d',
mode = 'markers',
marker = list(size = 5, color = ~rpct, colorscale = 'Viridis', showscale = TRUE))
# Personalizar o layout
fig <- fig %>% layout(
title = "Gráfico 3D: p_renda_10_ricos vs Gini vs RPCT",
scene = list(
xaxis = list(title = 'p_renda_10_ricos'),
yaxis = list(title = 'Gini'),
zaxis = list(title = 'RPCT')
)
)
# Exibir o gráfico
fig
names(meus.dados)
# Criar o gráfico 3D
fig <- plot_ly(meus.dados,
x = ~prop_renda_10_ricos,
y = ~gini,
z = ~rpct,
type = 'scatter3d',
mode = 'markers',
marker = list(size = 5, color = ~rpct, colorscale = 'Viridis', showscale = TRUE))
# Personalizar o layout
fig <- fig %>% layout(
title = "Gráfico 3D: p_renda_10_ricos vs Gini vs RPCT",
scene = list(
xaxis = list(title = 'p_renda_10_ricos'),
yaxis = list(title = 'Gini'),
zaxis = list(title = 'RPCT')
)
)
# Exibir o gráfico
fig
# Criar o gráfico 3D
fig <- plot_ly(meus.dados,
x = ~prop_renda_10_ricos,
y = ~gini,
z = ~rpct,
type = 'scatter3d',
mode = 'markers',
marker = list(size = 5, color = ~rpct, colorscale = 'Heat', showscale = TRUE))
# Personalizar o layout
fig <- fig %>% layout(
title = "Gráfico 3D: p_renda_10_ricos vs Gini vs RPCT",
scene = list(
xaxis = list(title = 'p_renda_10_ricos'),
yaxis = list(title = 'Gini'),
zaxis = list(title = 'RPCT')
)
)
# Exibir o gráfico
fig
ggplotly(plt)
meus.dados %>% group_by(name_region) %>% summarise( m_rpct = mean(rpct))
meus.dados %>% as.data.frame() %>%  group_by(name_region) %>% summarise( m_rpct = mean(rpct))
meus.dados %>% select(!geometry) %>%
group_by(name_region) %>% summarise( m_rpct = mean(rpct))
# Visualização de variáveis métricas
library(tidyverse)
# Discreta> barras
meus.dados %>%
ggplot(aes(x=code_region))+
geom_bar()
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram()
library(psych)
describe(var_metrica_continua)
# Visualização de variáveis métricas
library(tidyverse)
# Discreta> barras
meus.dados %>%
ggplot(aes(x=code_region))+
geom_bar()
# Contínua 1: histograma
meus.dados %>%
ggplot(aes(x=rpct))+
geom_histogram()
library(rio)
meus.dados <- import("G:/Meu Drive/02 - GitHub/R-Intro/A02 - Explore II/0 - data/mydata.RDS")
meus.dados$exemplo_dummy <- ifelse(meus.dados$gini > 0.6,
yes = "Muito desigual",
no = "Desigual")
meus.dados[,c("uf","gini","exemplo_dummy")]
minha.matriz <- matrix(1:10,nrow=5,ncol = 2,byrow = T)
minha.matriz
